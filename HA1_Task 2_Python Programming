{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DATACracy_Nguyen T Hong Hanh_HA1",
      "provenance": [],
      "authorship_tag": "ABX9TyOge72tV6LnECyM7hCLHxpR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nguyenhonghanh2511/datacracy-atom-Nguyen-T-Hong-Hanh/blob/main/DATACracy_Nguyen_T_Hong_Hanh_HA1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_8rNaiDWfTAK",
        "outputId": "b11d1a6c-ca88-4073-b8e6-a442e3f9de68"
      },
      "source": [
        "#Python Basic - Your First Program\n",
        "\n",
        "print('Hello, world!')\n",
        "print('What is your name?') # ask for their name\n",
        "myName = input()\n",
        "print('It is good to meet you, ' + myName)\n",
        "print('The length of your name is:')\n",
        "print(len(myName))\n",
        "print('What is your age?') # ask for their age\n",
        "myAge = input()\n",
        "print('You will be ' + str(int(myAge) + 1) + ' in a year.')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello, world!\n",
            "What is your name?\n",
            "Test\n",
            "It is good to meet you, Test\n",
            "The length of your name is:\n",
            "4\n",
            "What is your age?\n",
            "100\n",
            "You will be 101 in a year.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vL8fidF1-2Y1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cda19ae0-8370-4f97-9f02-c0b9ea7f5737"
      },
      "source": [
        "#Flow Control - A Short Program: Rock, Paper, Scissors\n",
        "\n",
        "import random, sys\n",
        "\n",
        "print('ROCK, PAPER, SCISSORS')\n",
        "\n",
        "# These variables keep track of the number of wins, losses, and ties.\n",
        "wins = 0\n",
        "losses = 0\n",
        "ties = 0\n",
        "\n",
        "while True: # The main game loop.\n",
        "    print('%s Wins, %s Losses, %s Ties' % (wins, losses, ties))\n",
        "    while True: # The player input loop.\n",
        "        print('Enter your move: (r)ock (p)aper (s)cissors or (q)uit')\n",
        "        playerMove = input()\n",
        "        if playerMove == 'q':\n",
        "            sys.exit() # Quit the program.\n",
        "        if playerMove == 'r' or playerMove == 'p' or playerMove == 's':\n",
        "            break # Break out of the player input loop.\n",
        "        print('Type one of r, p, s, or q.')\n",
        "        \n",
        "    # Display what the player chose:\n",
        "    if playerMove == 'r':\n",
        "        print('ROCK versus...')\n",
        "    elif playerMove == 'p':\n",
        "        print('PAPER versus...')\n",
        "    elif playerMove == 's':\n",
        "        print('SCISSORS versus...')\n",
        "\n",
        "    # Display what the computer chose:\n",
        "    randomNumber = random.randint(1, 3)\n",
        "    if randomNumber == 1:\n",
        "        computerMove = 'r'\n",
        "        print('ROCK')\n",
        "    elif randomNumber == 2:\n",
        "        computerMove = 'p'\n",
        "        print('PAPER')\n",
        "    elif randomNumber == 3:\n",
        "        computerMove = 's'\n",
        "        print('SCISSORS')\n",
        "\n",
        "    # Display and record the win/loss/tie:\n",
        "    if playerMove == computerMove:\n",
        "        print('It is a tie!')\n",
        "        ties = ties + 1\n",
        "    elif playerMove == 'r' and computerMove == 's':\n",
        "        print('You win!')\n",
        "        wins = wins + 1\n",
        "    elif playerMove == 'p' and computerMove == 'r':\n",
        "        print('You win!')\n",
        "        wins = wins + 1\n",
        "    elif playerMove == 's' and computerMove == 'p':\n",
        "        print('You win!')\n",
        "        wins = wins + 1\n",
        "    elif playerMove == 'r' and computerMove == 'p':\n",
        "        print('You lose!')\n",
        "        losses = losses + 1\n",
        "    elif playerMove == 'p' and computerMove == 's':\n",
        "        print('You lose!')\n",
        "        losses = losses + 1\n",
        "    elif playerMove == 's' and computerMove == 'r':\n",
        "        print('You lose!')\n",
        "        losses = losses + 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ROCK, PAPER, SCISSORS\n",
            "0 Wins, 0 Losses, 0 Ties\n",
            "Enter your move: (r)ock (p)aper (s)cissors or (q)uit\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wyhqMWIdkFAz"
      },
      "source": [
        "#Flow Control - A Short Program: Rock, Paper, Scissors (2)\n",
        "from random import randint\n",
        "#create a list of play options\n",
        "t = [\"Rock\", \"Paper\", \"Scissors\"]\n",
        "\n",
        "#assign a random play to the computer\n",
        "computer = t[randint(0,2)]\n",
        "\n",
        "#set player to False\n",
        "player = False\n",
        "\n",
        "while player == False:\n",
        "#set player to True\n",
        "    player = input(\"Rock, Paper, Scissors?\")\n",
        "    if player == computer:\n",
        "        print(\"Tie!\")\n",
        "    elif player == \"Rock\":\n",
        "        if computer == \"Paper\":\n",
        "            print(\"You lose!\", computer, \"covers\", player)\n",
        "        else:\n",
        "            print(\"You win!\", player, \"smashes\", computer)\n",
        "    elif player == \"Paper\":\n",
        "        if computer == \"Scissors\":\n",
        "            print(\"You lose!\", computer, \"cut\", player)\n",
        "        else:\n",
        "            print(\"You win!\", player, \"covers\", computer)\n",
        "    elif player == \"Scissors\":\n",
        "        if computer == \"Rock\":\n",
        "            print(\"You lose!\", computer, \"smashes\", player)\n",
        "        else:\n",
        "            print(\"You win!\", player, \"cut\", computer)\n",
        "    else:\n",
        "        print(\"Typo, please re-type.\")\n",
        "    #player was set to True, but we want it to be False so the loop continues\n",
        "    player = False\n",
        "    computer = t[randint(0,2)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "ai3bz_0R2QuF",
        "outputId": "3ebd7114-509b-42d3-e297-564fea7aa71e"
      },
      "source": [
        "#Functions - A Short Program: Zigzag\n",
        "\n",
        "import time, sys\n",
        "indent = 0 # How many spaces to indent.\n",
        "indentIncreasing = True # Whether the indentation is increasing or not.\n",
        "\n",
        "try:\n",
        "    while True: # The main program loop.\n",
        "       print(' ' * indent, end='')\n",
        "       print('********')\n",
        "       time.sleep(0.1) # Pause for 1/10 of a second.\n",
        "\n",
        "       if indentIncreasing:\n",
        "           # Increase the number of spaces:\n",
        "           indent = indent + 1\n",
        "           if indent == 20:\n",
        "               # Change direction:\n",
        "               indentIncreasing = False\n",
        "\n",
        "       else:\n",
        "           # Decrease the number of spaces:\n",
        "           indent = indent - 1\n",
        "           if indent == 0:\n",
        "               # Change direction:\n",
        "               indentIncreasing = True\n",
        "except KeyboardInterrupt:\n",
        "    sys.exit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " ********\n",
            "  ********\n",
            "   ********\n",
            "    ********\n",
            "     ********\n",
            "      ********\n",
            "       ********\n",
            "        ********\n",
            "         ********\n",
            "          ********\n",
            "           ********\n",
            "            ********\n",
            "             ********\n",
            "              ********\n",
            "               ********\n",
            "                ********\n",
            "                 ********\n",
            "                  ********\n",
            "                   ********\n",
            "                    ********\n",
            "                   ********\n",
            "                  ********\n",
            "                 ********\n",
            "                ********\n",
            "               ********\n",
            "              ********\n",
            "             ********\n",
            "            ********\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "SystemExit",
          "evalue": "ignored",
          "traceback": [
            "An exception has occurred, use %tb to see the full traceback.\n",
            "\u001b[0;31mSystemExit\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
            "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xBGOxMIL4cLB",
        "outputId": "9e1b9f1d-8837-4dc3-a18d-6bf72c485856"
      },
      "source": [
        "# Lists - A Short Program: Conway’s Game of Life\n",
        "import random, time, copy\n",
        "WIDTH = 60\n",
        "HEIGHT = 20\n",
        "\n",
        "# Create a list of list for the cells:\n",
        "nextCells = []\n",
        "for x in range(WIDTH):\n",
        "    column = [] # Create a new column.\n",
        "    for y in range(HEIGHT):\n",
        "        if random.randint(0, 1) == 0:\n",
        "              column.append('#') # Add a living cell.\n",
        "        else:\n",
        "              column.append(' ') # Add a dead cell.\n",
        "    nextCells.append(column) # nextCells is a list of column lists.\n",
        "\n",
        "while True: # Main program loop.\n",
        "    print('\\n\\n\\n\\n\\n') # Separate each step with newlines.\n",
        "    currentCells = copy.deepcopy(nextCells)\n",
        "\n",
        "    # Print currentCells on the screen:\n",
        "    for y in range(HEIGHT):\n",
        "        for x in range(WIDTH):\n",
        "            print(currentCells[x][y], end='') # Print the # or space.\n",
        "        print() # Print a newline at the end of the row.\n",
        "\n",
        "    # Calculate the next step's cells based on current step's cells:\n",
        "    for x in range(WIDTH):\n",
        "        for y in range(HEIGHT):\n",
        "        # Get neighboring coordinates:\n",
        "        # '% WIDTH' ensures leftCoord is always between 0 and WIDTH - 1\n",
        "         leftCoord = (x - 1) % WIDTH\n",
        "        rightCoord = (x + 1) % WIDTH\n",
        "        aboveCoord = (y - 1) % HEIGHT\n",
        "        belowCoord = (y + 1) % HEIGHT\n",
        "\n",
        "        # Count number of living neighbors:\n",
        "        numNeighbors = 0\n",
        "        if currentCells[leftCoord][aboveCoord] == '#':\n",
        "              numNeighbors += 1 # Top-left neighbor is alive.\n",
        "        if currentCells[x][aboveCoord] == '#':\n",
        "              numNeighbors += 1 # Top neighbor is alive.\n",
        "        if currentCells[rightCoord][aboveCoord] == '#':\n",
        "              numNeighbors += 1 # Top-right neighbor is alive.\n",
        "        if currentCells[leftCoord][y] == '#':\n",
        "              numNeighbors += 1 # Left neighbor is alive.\n",
        "        if currentCells[rightCoord][y] == '#':\n",
        "              numNeighbors += 1 # Right neighbor is alive.\n",
        "        if currentCells[leftCoord][belowCoord] == '#':\n",
        "              numNeighbors += 1 # Bottom-left neighbor is alive.\n",
        "        if currentCells[x][belowCoord] == '#':\n",
        "              numNeighbors += 1 # Bottom neighbor is alive.\n",
        "        if currentCells[rightCoord][belowCoord] == '#':\n",
        "              numNeighbors += 1 # Bottom-right neighbor is alive.\n",
        "\n",
        "        # Set cell based on Conway's Game of Life rules:\n",
        "        if currentCells[x][y] == '#' and (numNeighbors == 2 or\n",
        "numNeighbors == 3):\n",
        "              # Living cells with 2 or 3 neighbors stay alive:\n",
        "              nextCells[x][y] = '#'\n",
        "        elif currentCells[x][y] == ' ' and numNeighbors == 3:\n",
        "              # Dead cells with 3 neighbors become alive:\n",
        "              nextCells[x][y] = '#'\n",
        "        else:\n",
        "              # Everything else dies or stays dead:\n",
        "              nextCells[x][y] = ' '\n",
        "time.sleep(1) # Add a 1-second pause to reduce flickering."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " ##### ###  ###  ## ### #######  ####   #####   #  # # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "  #       # #    #      #              ##     ##  ## # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "   #    # ## ##  #   # ### ###   ## #  ######  #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " # ##   # ####   #   # # #          #  #       #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " ####   # ####   #   # # # ###   ####  ## #### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "  # #   # ####   #   # # #             ##      #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "    #   # ####   #   # # # ###   ## #  ####### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " # ##   # ####   #   # # #          #  #       #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " ####   # ####   #   # # # ###   ####  ## #### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "  # #   # ####   #   # # #             ##      #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "    #   # ####   #   # # # ###   ## #  ####### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " # ##   # ####   #   # # #          #  #       #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " ####   # ####   #   # # # ###   ####  ## #### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "  # #   # ####   #   # # #             ##      #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            "    #   # ####   #   # # # ###   ## #  ####### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " # ##   # ####   #   # # #          #  #       #  #  # #### \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # #   # #\n",
            " #####  ## #### #    ##        ## #      #   #  #########   \n",
            "# ####   # # #     # ###  #  #    ##  # ## ## # #####  # ## \n",
            "##   # # ### # ### # #  ###   ##  # #     #   ## # ## ##  ##\n",
            "        ## ###### ## ## ### #   ## #### ###   # # ###  ### #\n",
            "#    ## ## ## #### # # # # ###  #   #    ## ## ####  # #### \n",
            "##  #     ## # ##   ## #   ##### ###  # ###### #  ###  ## ##\n",
            "##  ##### ##### ##      ## #####  #   # ## ## ## #### ### ##\n",
            "#   ########    # ## # ####  # #    # ##### ###  ## #   #   \n",
            "#  ###   # ######       # #  # #  #### #    # #   ## ## #  #\n",
            "##  # ## ### ## ###      # # #  ###  ## ##   # ##   # ##  # \n",
            "  ## # #   ### ##     # ####  ### ###  #### #   ### # # # ##\n",
            "# # #  ######### # ##  ####  ##  #  ## #  ##       #### ### \n",
            "#  ##  # # # #### #    ###   #  ### ### ##   # # ##      ## \n",
            "##  # ###   # #  #### ##    #  ###  #   #####  ## ### ##  # \n",
            "#   # # ##    #    # # # ### ### #  ## #  #### #  ##    #   \n",
            " ####   # ####   #   # # # ###   ####  ## #### #  #  # #  # \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "##  # # #  #  #### # ##    #  ## ##  ##  #    #     ## #  ##\n",
            " #   ###     ##  ## ### ## # # #   # #   #     ##### #   ## \n",
            " ###   #  # ##   ## #  # #   #  ##        ##   # ##   #     \n",
            " #  ### ##    # # # #  # ##  ## ##  #   #   #  # # # # "
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-d87f265242d4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHEIGHT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mWIDTH\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrentCells\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Print the # or space.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Print a newline at the end of the row.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/iostream.py\u001b[0m in \u001b[0;36mwrite\u001b[0;34m(self, string)\u001b[0m\n\u001b[1;32m    398\u001b[0m             \u001b[0mis_child\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_master_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m             \u001b[0;31m# only touch the buffer in the IO thread to avoid races\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 400\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpub_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mschedule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    401\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_child\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    402\u001b[0m                 \u001b[0;31m# newlines imply flush in subprocesses\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/iostream.py\u001b[0m in \u001b[0;36mschedule\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m    201\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_events\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m             \u001b[0;31m# wake event thread (message content is ignored)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 203\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event_pipe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    204\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m             \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, data, flags, copy, track, routing_id, group)\u001b[0m\n\u001b[1;32m    503\u001b[0m                 )\n\u001b[1;32m    504\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 505\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSocket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    506\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    507\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msend_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_parts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.send\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.send\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._send_copy\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KimQl1bnyy7z"
      },
      "source": [
        "# Dictionaries & Structuring Data - Tic-Tac-Toe Board\n",
        "import os    \n",
        "import time    \n",
        "    \n",
        "board = [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']    \n",
        "player = 1    \n",
        "   \n",
        "########win Flags##########    \n",
        "Win = 1    \n",
        "Draw = -1    \n",
        "Running = 0    \n",
        "Stop = 1    \n",
        "###########################    \n",
        "Game = Running    \n",
        "Mark = 'X'    \n",
        "   \n",
        "#This Function Draws Game Board    \n",
        "def DrawBoard():    \n",
        "    print(\" %c | %c | %c \" % (board[1],board[2],board[3]))    \n",
        "    print(\"___|___|___\")    \n",
        "    print(\" %c | %c | %c \" % (board[4],board[5],board[6]))    \n",
        "    print(\"___|___|___\")    \n",
        "    print(\" %c | %c | %c \" % (board[7],board[8],board[9]))    \n",
        "    print(\"   |   |   \")    \n",
        "   \n",
        "#This Function Checks position is empty or not    \n",
        "def CheckPosition(x):    \n",
        "    if(board[x] == ' '):    \n",
        "        return True    \n",
        "    else:    \n",
        "        return False    \n",
        "   \n",
        "#This Function Checks player has won or not    \n",
        "def CheckWin():    \n",
        "    global Game    \n",
        "    #Horizontal winning condition    \n",
        "    if(board[1] == board[2] and board[2] == board[3] and board[1] != ' '):    \n",
        "        Game = Win    \n",
        "    elif(board[4] == board[5] and board[5] == board[6] and board[4] != ' '):    \n",
        "        Game = Win    \n",
        "    elif(board[7] == board[8] and board[8] == board[9] and board[7] != ' '):    \n",
        "        Game = Win    \n",
        "    #Vertical Winning Condition    \n",
        "    elif(board[1] == board[4] and board[4] == board[7] and board[1] != ' '):    \n",
        "        Game = Win    \n",
        "    elif(board[2] == board[5] and board[5] == board[8] and board[2] != ' '):    \n",
        "        Game = Win    \n",
        "    elif(board[3] == board[6] and board[6] == board[9] and board[3] != ' '):    \n",
        "        Game=Win    \n",
        "    #Diagonal Winning Condition    \n",
        "    elif(board[1] == board[5] and board[5] == board[9] and board[5] != ' '):    \n",
        "        Game = Win    \n",
        "    elif(board[3] == board[5] and board[5] == board[7] and board[5] != ' '):    \n",
        "        Game=Win    \n",
        "    #Match Tie or Draw Condition    \n",
        "    elif(board[1]!=' ' and board[2]!=' ' and board[3]!=' ' and board[4]!=' ' and board[5]!=' ' and board[6]!=' ' and board[7]!=' ' and board[8]!=' ' and board[9]!=' '):    \n",
        "        Game=Draw    \n",
        "    else:            \n",
        "        Game=Running    \n",
        "    \n",
        "print(\"Tic-Tac-Toe Game\")    \n",
        "print(\"Player 1 [X] --- Player 2 [O]\\n\")    \n",
        "print()    \n",
        "print()    \n",
        "print(\"Please Wait...\")    \n",
        "time.sleep(3)    \n",
        "while(Game == Running):    \n",
        "    os.system('cls')    \n",
        "    DrawBoard()    \n",
        "    if(player % 2 != 0):    \n",
        "        print(\"Player 1's chance\")    \n",
        "        Mark = 'X'    \n",
        "    else:    \n",
        "        print(\"Player 2's chance\")    \n",
        "        Mark = 'O'    \n",
        "    choice = int(input(\"Enter the position between [1-9] where you want to mark: \"))    \n",
        "    if(CheckPosition(choice)):    \n",
        "        board[choice] = Mark    \n",
        "        player+=1    \n",
        "        CheckWin()    \n",
        "    \n",
        "os.system('cls')    \n",
        "DrawBoard()    \n",
        "if(Game==Draw):    \n",
        "    print(\"Game Draw\")    \n",
        "elif(Game==Win):    \n",
        "    player-=1    \n",
        "    if(player%2!=0):    \n",
        "        print(\"Player 1 Won\")    \n",
        "    else:    \n",
        "        print(\"Player 2 Won\")   "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UUPTgtElwctw"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yo1cAOYi0w1j"
      },
      "source": [
        "# Dictionaries & Structuring Data - Tic-Tac-Toe Board (2)\n",
        "\n",
        "theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,\n",
        "            '4': ' ' , '5': ' ' , '6': ' ' ,\n",
        "            '1': ' ' , '2': ' ' , '3': ' ' }\n",
        "\n",
        "board_keys = []\n",
        "\n",
        "for key in theBoard:\n",
        "    board_keys.append(key)\n",
        "\n",
        "def printBoard(board):\n",
        "    print(board['7'] + '|' + board['8'] + '|' + board['9'])\n",
        "    print('-+-+-')\n",
        "    print(board['4'] + '|' + board['5'] + '|' + board['6'])\n",
        "    print('-+-+-')\n",
        "    print(board['1'] + '|' + board['2'] + '|' + board['3'])\n",
        "\n",
        "# The main function which has all the gameplay functionality.\n",
        "def game():\n",
        "\n",
        "    turn = 'X'\n",
        "    count = 0\n",
        "\n",
        "\n",
        "    for i in range(10):\n",
        "        printBoard(theBoard)\n",
        "        print(\"It's your turn,\" + turn + \". Move to which place?\")\n",
        "\n",
        "        move = input()        \n",
        "\n",
        "        if theBoard[move] == ' ':\n",
        "            theBoard[move] = turn\n",
        "            count += 1\n",
        "        else:\n",
        "            print(\"That place is already filled. Move to which place?\")\n",
        "            continue\n",
        "\n",
        "        # Check if player X or O has won, for every move after 5 moves. \n",
        "        if count >= 5:\n",
        "            if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ': # across the top\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")                \n",
        "                break\n",
        "            elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': # across the middle\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break\n",
        "            elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ': # across the bottom\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break\n",
        "            elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': # down the left side\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break\n",
        "            elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ': # down the middle\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break\n",
        "            elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # down the right side\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break \n",
        "            elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': # diagonal\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break\n",
        "            elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': # diagonal\n",
        "                printBoard(theBoard)\n",
        "                print(\"Game Over.\")                \n",
        "                print(\" **** \" +turn + \" won. ****\")\n",
        "                break \n",
        "\n",
        "        # If neither X nor O wins and the board is full, the result is 'tie'.\n",
        "        if count == 9:\n",
        "            print(\"Game Over.\")                \n",
        "            print(\"Tie!!\")\n",
        "\n",
        "        # The player will be changed after every move.\n",
        "        if turn =='X':\n",
        "            turn = 'O'\n",
        "        else:\n",
        "            turn = 'X'        \n",
        "    \n",
        "    # Whether player wants to restart the game or not.\n",
        "    restart = input(\"Play again? (y/n)\")\n",
        "    if restart == \"y\" or restart == \"Y\":  \n",
        "        for key in board_keys:\n",
        "            theBoard[key] = \" \"\n",
        "\n",
        "        game()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    game()"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
